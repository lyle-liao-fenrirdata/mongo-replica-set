version: "3"
services:
  mongo-rs1:
    # image: mongo:7.0.2
    image: mongo:5.0.22
    restart: always
    container_name: mongo-rs1
    networks:
      - mongodb
    ports:
      - 27017:27017
      # - 27041:27041
    command: mongod --replSet RS --bind_ip localhost,mongo-rs1 --port 27017 --dbpath /data/db --config /resource/mongod.yml
    volumes:
      - mongoConfig:/resource/mongod.yml
      - mongoKeyfile:/opt/keyfile.txt
      - mongo1data:/data/db
    entrypoint:
      - bash
      - -c
      - |
        chmod 400 /opt/keyfile.txt
        chown 999:999 /opt/keyfile.txt
        exec docker-entrypoint.sh $$@
    environment:
      MONGO_INITDB_DATABASE: admin
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: root
      MONGO_USERNAME: user
      MONGO_PASSWORD: user

  mongo-rs2:
    # image: mongo:7.0.2
    image: mongo:5.0.22
    restart: always
    container_name: mongo-rs2
    networks:
      - mongodb
    # ports:
    #   - 27042:27042
    command: mongod --replSet RS --bind_ip localhost,mongo-rs2 --port 27017 --dbpath /data/db --config /resource/mongod.yml
    volumes:
      - mongoConfig:/resource/mongod.yml
      - mongoKeyfile:/opt/keyfile.txt
      - mongo2data:/data/db
    entrypoint:
      - bash
      - -c
      - |
        chmod 400 /opt/keyfile.txt
        chown 999:999 /opt/keyfile.txt
        exec docker-entrypoint.sh $$@
    environment:
      MONGO_INITDB_DATABASE: admin
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: root
      MONGO_USERNAME: user
      MONGO_PASSWORD: user

  mongo-rs3:
    # image: mongo:7.0.2
    image: mongo:5.0.22
    restart: always
    container_name: mongo-rs3
    networks:
      - mongodb
    # ports:
    #   - 27043:27043
    command: mongod --replSet RS --bind_ip localhost,mongo-rs3 --port 27017 --dbpath /data/db --config /resource/mongod.yml
    volumes:
      - mongoConfig:/resource/mongod.yml
      - mongoKeyfile:/opt/keyfile.txt
      - mongo3data:/data/db
    entrypoint:
      - bash
      - -c
      - |
        chmod 400 /opt/keyfile.txt
        chown 999:999 /opt/keyfile.txt
        exec docker-entrypoint.sh $$@
    environment:
      MONGO_INITDB_DATABASE: admin
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: root
      MONGO_USERNAME: user
      MONGO_PASSWORD: user

  mongo-setup:
    image: mongo:5.0.22
    container_name: mongo-setup
    depends_on:
      - mongo-rs1
      - mongo-rs2
      - mongo-rs3
    command: >
      bash -c "echo 'Waiting for MongoDB to start...' && sleep 10 &&
      mongo --host mongo-rs1 --eval '
        rs.initiate({
          _id: \"RS\",
          members: [
            { _id: 0, host: \"mongo-rs1:27017\", \"priority\": 1 },
            { _id: 1, host: \"mongo-rs2:27017\", \"priority\": 0 },
            { _id: 2, host: \"mongo-rs3:27017\", \"priority\": 0 }
          ]
        })
      ' && echo 'MongoDB Replica Set initiated' && sleep 5 &&
      echo 'Creating a test transaction...' &&
      mongo --host mongo-rs1 --eval '
        db.getSiblingDB(\"test\").runCommand({
          create: \"testCollection\"
        });
        db.getSiblingDB(\"test\").testCollection.insert([
          { _id: 1, name: \"Document 1\" },
          { _id: 2, name: \"Document 2\" }
        ]);
        db.getSiblingDB(\"test\").testCollection.find().forEach(printjson);
      '"
    networks:
      - mongodb

  mongo-backup:
    image: mongo:5.0.22
    container_name: mongo-backup
    depends_on:
      - mongo-rs1
      - mongo-setup
    volumes:
      - rs_v1.1:/backup
    entrypoint: /bin/bash
    command: >
      -c "while :; do
            mongodump --host mongo-rs1 --port 27017 --out=/backup/$$(date +'%Y%m%d_%H%M%S');
            echo 'Backup completed';
            sleep 5; # 
          done"
    networks:
      - mongodb

networks:
  mongodb:
    name: mongodb
    driver: bridge

volumes:
  mongo1data:
    driver: local
    driver_opts:
      o: bind
      type: none
      device: /mnt/data/frontend/rs1
  mongo2data:
    driver: local
    driver_opts:
      o: bind
      type: none
      device: /mnt/data/frontend/rs2
  mongo3data:
    driver: local
    driver_opts:
      o: bind
      type: none
      device: /mnt/data/frontend/rs3
  mongoConfig:
    driver: local
    driver_opts:
      o: bind
      type: none
      device: ./replica/config/mongod.yml
  mongoKeyfile:
    driver: local
    driver_opts:
      o: bind
      type: none
      device: ./replica/keyfile.txt
  rs_v1.1:
    driver: local
    driver_opts:
      type: nfs
      o: addr=192.168.15.22,nolock,soft,rw,nfsvers=3
      device: ":/mnt/remote_storage/mongodb/rs"
